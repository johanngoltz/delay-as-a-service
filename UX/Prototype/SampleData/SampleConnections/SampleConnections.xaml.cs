//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Blend.SampleData.SampleConnections
{
    using System; 
    using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
    internal class SampleConnections { }
#else

    public class SampleConnections : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public SampleConnections()
        {
            try
            {
                Uri resourceUri = new Uri("ms-appx:/SampleData/SampleConnections/SampleConnections.xaml", UriKind.RelativeOrAbsolute);
                Windows.UI.Xaml.Application.LoadComponent(this, resourceUri);
            }
            catch
            {
            }
        }

        private Connection _Connection = new Connection();

        public Connection Connection
        {
            get
            {
                return this._Connection;
            }
        }
    }

    public class ConnectionItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private string _StartTime = string.Empty;

        public string StartTime
        {
            get
            {
                return this._StartTime;
            }

            set
            {
                if (this._StartTime != value)
                {
                    this._StartTime = value;
                    this.OnPropertyChanged("StartTime");
                }
            }
        }

        private string _EndTime = string.Empty;

        public string EndTime
        {
            get
            {
                return this._EndTime;
            }

            set
            {
                if (this._EndTime != value)
                {
                    this._EndTime = value;
                    this.OnPropertyChanged("EndTime");
                }
            }
        }

        private Changeover _Changeover = new Changeover();

        public Changeover Changeover
        {
            get
            {
                return this._Changeover;
            }
        }

        private double _Changeovers = 0;

        public double Changeovers
        {
            get
            {
                return this._Changeovers;
            }

            set
            {
                if (this._Changeovers != value)
                {
                    this._Changeovers = value;
                    this.OnPropertyChanged("Changeovers");
                }
            }
        }
    }

    public class ChangeoverItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private string _TrainName = string.Empty;

        public string TrainName
        {
            get
            {
                return this._TrainName;
            }

            set
            {
                if (this._TrainName != value)
                {
                    this._TrainName = value;
                    this.OnPropertyChanged("TrainName");
                }
            }
        }

        private string _Location = string.Empty;

        public string Location
        {
            get
            {
                return this._Location;
            }

            set
            {
                if (this._Location != value)
                {
                    this._Location = value;
                    this.OnPropertyChanged("Location");
                }
            }
        }
    }

    public class Changeover : System.Collections.ObjectModel.ObservableCollection<ChangeoverItem>
    { 
    }

    public class Connection : System.Collections.ObjectModel.ObservableCollection<ConnectionItem>
    { 
    }
#endif
}
